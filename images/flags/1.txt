#include <DHT.h>
#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = "@KKTMPJ STUDENT";  //@KKTMPJ STAFF
const char* password = "pelatihkktmpj";   //kktmpj1234
const char* mqtt_server = "10.73.99.62";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];

#define LED_PIN_A 18   // ESP32 pin GPIO13 connected to LED's pin
#define LED_PIN_B 19   // ESP32 pin GPIO14 connected to LED's pin
#define LED_PIN_C 21   // ESP32 pin GPIO27 connected to LED's pin
#define LED_PIN_GL 17  // Green LED: indicate WiFi connection status
#define LED_PIN_YL 16  // Yellow LED: indicate MQTT connection status
#define LED_PIN_BL 4   // Blue LED: toggle when MQTT command received
#define BUTTON_PIN 32  // ESP32 GPIO16 pin connected to button's pin

bool buttonA = false;
int buttonState = HIGH;
int buttonLastState = HIGH;

bool moduleEnabled = false;  // Controlled by Node-RED
bool buttonPressed = false;
unsigned long lastStepTime = 0;
const unsigned long stepDelay = 1000;
int stepIndex = 0;
const int totalSteps = 6;

bool sequenceA[3][6] = {
  { 1, 0, 1, 0, 1, 0 },  // LED A
  { 0, 1, 0, 1, 0, 1 },  // LED B
  { 1, 0, 1, 0, 1, 0 }   // LED C
};

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_PIN_GL, LOW);
  }
  digitalWrite(LED_PIN_GL, HIGH);

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");

  String msg;
  for (int i = 0; i < length; i++) {
    msg += (char)payload[i];
    Serial.print((char)payload[i]);
  }
  Serial.println();
  bool state = msg == "ON";

  digitalWrite(LED_PIN_BL, HIGH);  //MQTT toggle data receive
  delay(200);
  digitalWrite(LED_PIN_BL, LOW);

  if (String(topic) == "led/A") digitalWrite(LED_PIN_A, state);
  else if (String(topic) == "led/B") digitalWrite(LED_PIN_B, state);
  else if (String(topic) == "led/C") digitalWrite(LED_PIN_C, state);

  if (String(topic) == "module/enable") {
    moduleEnabled = (msg == "true");
    Serial.print("Module 1 Enabled: ");
    Serial.println(moduleEnabled ? "YES" : "NO");
  }

  if (String(topic) == "buttonA" && moduleEnabled) {
    if (msg == "true" && !buttonPressed) {
      buttonPressed = true;
      client.publish("button/state", "true");
      Serial.println("Button PRESSED via Node-RED");
    } else if (msg == "false" && buttonPressed) {
      buttonPressed = false;
      client.publish("button/state", "false");
      Serial.println("Button RELEASED via Node-RED");
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      digitalWrite(LED_PIN_YL, HIGH);  //MQTT
      // Once connected, publish an announcement...
      // client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("led/A");
      client.subscribe("led/B");
      client.subscribe("led/C");
      client.subscribe("buttonA");
      client.subscribe("module/enable");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      digitalWrite(LED_PIN_YL, LOW);
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);  // initialize serial
  pinMode(LED_PIN_A, OUTPUT);
  pinMode(LED_PIN_B, OUTPUT);
  pinMode(LED_PIN_C, OUTPUT);
  pinMode(LED_PIN_GL, OUTPUT);        //WIFI
  pinMode(LED_PIN_YL, OUTPUT);        //MQTT
  pinMode(LED_PIN_BL, OUTPUT);        //MQTT toggle data receive
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // set ESP32 pin to input pull-up mode
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  if (moduleEnabled) {
    buttonState = digitalRead(BUTTON_PIN);  // read new state
    if (buttonState == LOW && buttonLastState == HIGH) {
      buttonPressed = true;
      client.publish("button/state", "true");
      Serial.println("Button PRESSED");
      buttonLastState = buttonState;
    } else if (buttonState == HIGH && buttonLastState == LOW) {
      buttonPressed = false;
      client.publish("button/state", "false");
      Serial.println("Button RELEASED");
      buttonLastState = buttonState;
    }
    if (buttonPressed && millis() - lastStepTime >= stepDelay) {
      lastStepTime = millis();
      digitalWrite(LED_PIN_A, sequenceA[0][stepIndex]);
      digitalWrite(LED_PIN_B, sequenceA[1][stepIndex]);
      digitalWrite(LED_PIN_C, sequenceA[2][stepIndex]);
      // Also publish current LED states (optional)
      client.publish("led/A", sequenceA[0][stepIndex] ? "ON" : "OFF");
      client.publish("led/B", sequenceA[1][stepIndex] ? "ON" : "OFF");
      client.publish("led/C", sequenceA[2][stepIndex] ? "ON" : "OFF");
      stepIndex = (stepIndex + 1) % totalSteps;
    }
  }
}