#include <DHT.h>
#include <WiFi.h>
#include <PubSubClient.h>

// WiFi and MQTT settings
const char* ssid = "@KKTMPJ STUDENT";
const char* password = "pelatihkktmpj";
const char* mqtt_server = "10.73.99.210";

// Pins for Module 3
#define TRIG_PIN 22            // Ultrasonic Sensor TRIG pin
#define ECHO_PIN 23            // Ultrasonic Sensor ECHO pin
#define DHT11_PIN 33           // DHT11 sensor data pin
#define BUZZER_PIN 26          // Buzzer pin

// Buzzer melody
int melody[] = {262, 277, 311, 523, 0, 523, 466, 466, 415, 311, 0, 311, 311, 349, 311, 277, 262};
int noteDurations[] = {200, 150, 200, 200, 100, 200, 200, 200, 200, 200, 100, 200, 200, 200, 200, 150, 200};
bool buzzer_play = false;

// DHT sensor setup
#define DHT_SENSOR_TYPE DHT11
DHT dht11(DHT11_PIN, DHT_SENSOR_TYPE);
bool dht_request = false;

// Variables for timing and distance
unsigned long last_dht = 0;
unsigned long last_ultrasonic = 0;
unsigned long last_buzzer_time = 0;
float duration_us, distance_cm;

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }

  if (String(topic) == "dht/request") {
    dht_request = (msg == "1");
  }

  if (String(topic) == "buzzer/play") {
    buzzer_play = (msg == "1");
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
      client.subscribe("dht/request");
      client.subscribe("buzzer/play");
    } else {
      Serial.print("Failed. rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  dht11.begin();
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // DHT11 temperature and humidity reading
  if (dht_request && millis() - last_dht >= 15000) {
    last_dht = millis();
    float temp = dht11.readTemperature();
    float humi = dht11.readHumidity();

    if (!isnan(temp) && !isnan(humi)) {
      Serial.printf("Temperature: %.2f Â°C\nHumidity: %.2f %%\n", temp, humi);
      char tempStr[10], humiStr[10];
      dtostrf(temp, 5, 2, tempStr);
      dtostrf(humi, 5, 2, humiStr);
      client.publish("dht/temperature", tempStr);
      client.publish("dht/humidity", humiStr);
      dht_request = false;
    } else {
      Serial.println("Failed to read from DHT11 sensor.");
    }
  }

  // Ultrasonic distance sensor
  if (millis() - last_ultrasonic >= 1000) {
    last_ultrasonic = millis();

    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    duration_us = pulseIn(ECHO_PIN, HIGH);
    distance_cm = 0.017 * duration_us;

    char distanceStr[10];
    dtostrf(distance_cm, 6, 2, distanceStr);
    client.publish("ultrasonic/distance", distanceStr);

    Serial.printf("Distance: %.2f cm\n", distance_cm);
    if (distance_cm > 20) {
      digitalWrite(BUZZER_PIN, LOW);  // turn off if no object
    }
  }

  // Play buzzer melody
  if (buzzer_play && millis() - last_buzzer_time >= 1000) {
    last_buzzer_time = millis();
    for (int i = 0; i < sizeof(melody) / sizeof(int); i++) {
      tone(BUZZER_PIN, melody[i]);
      delay(noteDurations[i]);
      noTone(BUZZER_PIN);
      delay(noteDurations[i]);
    }
    buzzer_play = false;
  } else {
    noTone(BUZZER_PIN);
  }
}
